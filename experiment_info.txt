*********************************************************************************************************************
****  The following is the output from the matlab Command Window. The "info" field displays useful informations 
****  about the data from the first and second experiments like first_timestamp, second_timestamp, and sample_count.
****  The duration of the experiment in seconds can be found by subtracting first_timestamp from last_timestamp and 
****  sample_count is the total number of data points collected during the experiment. 
****  There are two structures in each experiment data. The first one (stream{1}) is the event markers output from the game
****  "Keep Talking Nobody Explodes" and the second one (stream{2}) is the ECG data from the "HeartyPatch" program.
*********************************************************************************************************************


*******************************************************
*** first experiment data information
*******************************************************
 
>> stream = load_xdf("first_experiment.xdf")

stream =

  1×2 cell array

    {1×1 struct}    {1×1 struct}

>> stream{1}   % event marker data output from "Keep Talking Nobody Explodes" Game ('Keep Talking Stream')

ans = 

  struct with fields:

           info: [1×1 struct]              % overall info about the data from 'Keep Talking Stream'
    time_series: {1×13 cell}               % the event markers string output from 'Keep talking Stream'
    time_stamps: [1×13 double]             % the timestamp to indicate each event marker is output


>> stream{1}.info

ans = 

  struct with fields:

               name: 'Keep Talking Stream'
               type: 'markers'
      channel_count: '1'
      nominal_srate: '0'
     channel_format: 'string'
          source_id: 'D3F83BB699EB49AB94A9FA44B88882AB'
            version: '1.1000000000000001'
         created_at: '426344.52683280001'
                uid: 'c835eaa6-f40d-49ac-afd7-5577065d7e97'
         session_id: 'default'
           hostname: 'DESKTOP-9URG96H'
          v4address: [1×1 struct]
        v4data_port: '16572'
     v4service_port: '16572'
          v6address: [1×1 struct]
        v6data_port: '16572'
     v6service_port: '16572'
               desc: [1×1 struct]
      clock_offsets: [1×1 struct]
    first_timestamp: '11.82478427886963'
     last_timestamp: '585.7169189453125'
       sample_count: '13'


>> stream{1}.time_series

ans =

  1×13 cell array

  Columns 1 through 5

    {'fifth wire (6 w…'}    {'2 min test pres…'}    {'third wire (6 w…'}    {'fourth wire (6 …'}    {'wire 6 cleared …'}

  Columns 6 through 10

    {'2 min test pres…'}    {'first wire (4 w…'}    {'wire 4 cleared …'}    {'20 sec test pre…'}    {'green simon say…'}

  Columns 11 through 13

    {'green simon say…'}    {'green simon say…'}    {'red simon says …'}


>> stream{1}.time_stamps

ans =

   11.8250  170.7379  235.9050  236.4381  236.4491  387.1324  416.5486  416.5598  566.4982  573.1333  581.0189  583.5842  585.7171



>> stream{2}   % the ECG data from the "HeartyPatch" device/program

ans = 

  struct with fields:

           info: [1×1 struct]        % overall info about the data from HeartyPatch
       segments: [1×4 struct]        % info about data that is collected in 4 segments
    time_series: [1×93232 single]    % the ECG signal data output from the HeartyPatch Device
    time_stamps: [1×93232 double]    % the timestamp to indicate when each ECG signal data is sampled and output

>> stream{2}.info      % overall info about the data from HeartyPatch

ans = 

  struct with fields:

               name: 'HeartyPatch'
               type: 'ECG'
      channel_count: '1'
      nominal_srate: '128'
     channel_format: 'float32'
          source_id: [1×1 struct]
            version: '1.1000000000000001'
         created_at: '284004.79730189999'
                uid: 'c161b5c1-2b4b-4b14-bc2b-7607674485c9'
         session_id: 'default'
           hostname: 'DESKTOP-HHDJL8G'
          v4address: [1×1 struct]
        v4data_port: '16572'
     v4service_port: '16572'
          v6address: [1×1 struct]
        v6data_port: '16572'
     v6service_port: '16572'
               desc: [1×1 struct]
      clock_offsets: [1×1 struct]
    first_timestamp: '284477.2131611'
     last_timestamp: '285203.8916788'
       sample_count: '93232'
    effective_srate: 128.6152


>> stream{2}.segments       % info about data that is collected in 4 segments

ans = 

  1×4 struct array with fields:

    num_samples
    index_range
    t_begin
    t_end
    duration
    effective_srate

>> stream{2}.segments.num_samples

ans =

       18168


ans =

       64296


ans =

        7760


ans =

        3007

>> stream{2}.segments.index_range

ans =

           1       18168


ans =

       18169       82464


ans =

       82465       90224


ans =

       90225       93231

>> stream{2}.segments.t_begin

ans =

   4.2635e+05


ans =

   4.2649e+05


ans =

   4.2700e+05


ans =

   4.2706e+05

>> stream{2}.segments.t_end

ans =

   4.2649e+05


ans =

   4.2700e+05


ans =

   4.2706e+05


ans =

   4.2708e+05

>> stream{2}.segments.duration

ans =

  141.5896


ans =

  501.9634


ans =

   59.8334


ans =

   21.6215

>> stream{2}.segments.effective_srate

ans =

  128.3075


ans =

  128.0870


ans =

  129.6768


ans =

  139.0280


>> stream{2}.time_series(1:20)     % the first 20 sample ECG signal data output from the HeartyPatch Device

ans =

  1×20 single row vector

  Columns 1 through 13

 -819.2000 -802.8160 -802.8160 -802.8160 -819.2000 -819.2000 -819.2000 -802.8160 -819.2000 -835.5840 -835.5840 -835.5840 -819.2000

  Columns 14 through 20

 -819.2000 -819.2000 -819.2000 -819.2000 -835.5840 -835.5840 -819.2000

>> stream{2}.time_stamps(1:20)     % the first 20 timestamps that corresponds to the time for the first 20 ECG data output above

ans =

   1.0e+05 *

  Columns 1 through 13

    4.2635    4.2635    4.2635    4.2635    4.2635    4.2635    4.2635    4.2635    4.2635    4.2635    4.2635    4.2635    4.2635

  Columns 14 through 20

    4.2635    4.2635    4.2635    4.2635    4.2635    4.2635    4.2635



*******************************************************
*** second experiment data information
*******************************************************

>> stream2 = load_xdf("second_experiment.xdf")

stream2 =

  1×2 cell array

    {1×1 struct}    {1×1 struct}

>> stream2{1}

ans = 

  struct with fields:

           info: [1×1 struct]
    time_series: {1×21 cell}
    time_stamps: [1×21 double]


>> stream2{1}.info

ans = 

  struct with fields:

               name: 'Keep Talking Stream'
               type: 'markers'
      channel_count: '1'
      nominal_srate: '0'
     channel_format: 'string'
          source_id: 'D3F83BB699EB49AB94A9FA44B88882AB'
            version: '1.1000000000000001'
         created_at: '430531.77149890002'
                uid: '630bdfd8-40ca-4e69-ba33-52add0da07de'
         session_id: 'default'
           hostname: 'DESKTOP-9URG96H'
          v4address: [1×1 struct]
        v4data_port: '16572'
     v4service_port: '16572'
          v6address: [1×1 struct]
        v6data_port: '16572'
     v6service_port: '16572'
               desc: [1×1 struct]
      clock_offsets: [1×1 struct]
    first_timestamp: '128.376953125'
     last_timestamp: '807.9853515625'
       sample_count: '21'


>> stream2{1}.time_series

ans =

  1×21 cell array

  Columns 1 through 5

    {'2 min test pres…'}    {'green simon say…'}    {'green simon say…'}    {'blue simon says…'}    {'green simon say…'}

  Columns 6 through 10

    {'blue simon says…'}    {'red simon says …'}    {'green simon say…'}    {'blue simon says…'}    {'red simon says …'}

  Columns 11 through 15

    {'red simon says …'}    {'simon says clea…'}    {'20 sec test pre…'}    {'first wire (4 w…'}    {'wire 4 cleared …'}

  Columns 16 through 20

    {'2 min test pres…'}    {'third wire (3 w…'}    {'wire 3 cleared …'}    {'20 sec test pre…'}    {'fourth wire (4 …'}

  Column 21

    {'wire 4 cleared …'}

>> stream2{1}.time_stamps

ans =

  Columns 1 through 13

  128.3768  151.3798  155.5556  166.2733  177.3903  179.0674  180.1670  201.5798  207.8657  211.0422  211.8309  211.8418  385.6007

  Columns 14 through 21

  403.9372  403.9484  548.1000  564.8252  564.8362  787.5961  807.9740  807.9852


>> stream2{2}

ans = 

  struct with fields:

           info: [1×1 struct]
       segments: [1×3 struct]
    time_series: [1×104856 single]
    time_stamps: [1×104856 double]

>> stream2{2}.info

ans = 

  struct with fields:

               name: 'HeartyPatch'
               type: 'ECG'
      channel_count: '1'
      nominal_srate: '128'
     channel_format: 'float32'
          source_id: [1×1 struct]
            version: '1.1000000000000001'
         created_at: '287965.6696963'
                uid: 'e85ed5b2-961c-4b68-91cb-39374b7e09a6'
         session_id: 'default'
           hostname: 'DESKTOP-HHDJL8G'
          v4address: [1×1 struct]
        v4data_port: '16572'
     v4service_port: '16572'
          v6address: [1×1 struct]
        v6data_port: '16572'
     v6service_port: '16572'
               desc: [1×1 struct]
      clock_offsets: [1×1 struct]
    first_timestamp: '288665.4958202'
     last_timestamp: '289484.1581751'
       sample_count: '104856'
    effective_srate: 128.1780


>> stream2{2}.segments

ans = 

  1×3 struct array with fields:

    num_samples
    index_range
    t_begin
    t_end
    duration
    effective_srate

>> stream2{2}.segments.num_samples

ans =

       28840


ans =

       58824


ans =

       17191

>> stream2{2}.segments.index_range

ans =

           1       28840


ans =

       28841       87664


ans =

       87665      104855

>> stream2{2}.segments.t_begin

ans =

   4.3054e+05


ans =

   4.3077e+05


ans =

   4.3123e+05

>> stream2{2}.segments.t_end

ans =

   4.3077e+05


ans =

   4.3123e+05


ans =

   4.3136e+05

>> stream2{2}.segments.duration

ans =

  225.1520


ans =

  459.1225


ans =

  133.7452

>> stream2{2}.segments.effective_srate

ans =

  128.0868


ans =

  128.1205


ans =

  128.5280
 

>> stream2{2}.time_series(1:20)

ans =

  1×20 single row vector

   1.0e+03 *

  Columns 1 through 13

   -1.2780   -1.2780   -1.2780   -1.3107   -1.3435   -1.3271   -1.3271   -1.2943   -1.3107   -1.3271   -1.3107   -1.3107   -1.3107

  Columns 14 through 20

   -1.2943   -1.3271   -1.2943   -1.3271   -1.2943   -1.3107   -1.3271

>> stream2{2}.time_stamps(1:20)

ans =

   1.0e+05 *

  Columns 1 through 13

    4.3054    4.3054    4.3054    4.3054    4.3054    4.3054    4.3054    4.3054    4.3054    4.3054    4.3054    4.3054    4.3054

  Columns 14 through 20

    4.3054    4.3054    4.3054    4.3054    4.3054    4.3054    4.3054
